# mishka_ai/handlers/admin_commands/user_data_commands.py
"""
–ú–æ–¥—É–ª—å —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

–°–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
"""
import logging
import asyncio
from telegram import Update, constants
from telegram.ext import ContextTypes
from telegram.helpers import escape_markdown

logger = logging.getLogger(__name__)

async def list_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_users.

    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –±–æ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    —Å –∏—Ö ID, –∏–º–µ–Ω–∞–º–∏, –Ω–∏–∫–Ω–µ–π–º–∞–º–∏ –∏ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
    –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–Ω —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    user_id_str = str(update.effective_user.id)
    admin_user_id = context.bot_data.get("admin_user_id")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not admin_user_id or user_id_str != admin_user_id:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.")
        return

    users_data: dict = context.bot_data.get("users_data_dict", {})
    if not users_data:
        await update.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_entries_texts = []
    for u_id, info in users_data.items():
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
        name = escape_markdown(info.get('name', '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'))
        nicknames_list = info.get('nicknames', [])
        if isinstance(nicknames_list, str): nicknames_list = [nicknames_list] # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        escaped_nicknames = [escape_markdown(n) for n in nicknames_list]
        known_info = escape_markdown(info.get('known_info', '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'))

        nick_str_display = f" (–ü—Ä–æ–∑–≤–∏—â–∞: {', '.join(escaped_nicknames)})" if escaped_nicknames else ""
        entry = f"üë§ *{name}*{nick_str_display}\n   ID: `{u_id}`\n   –û –Ω–µ–º –∏–∑–≤–µ—Å—Ç–Ω–æ: _{known_info}_"
        user_entries_texts.append(entry)
    
    header = "üë• *–°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n"
    messages_to_send = []
    current_message_part = header

    # –õ–æ–≥–∏–∫–∞ —Ä–∞–∑–±–∏–≤–∫–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    for entry_text in user_entries_texts:
        if len(current_message_part) + len(entry_text) + 2 > 4096: # –õ–∏–º–∏—Ç Telegram –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            messages_to_send.append(current_message_part)
            current_message_part = "üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):*\n\n" + entry_text + "\n\n"
        else:
            current_message_part += entry_text + "\n\n"
            
    if current_message_part.strip() != header.strip():
        messages_to_send.append(current_message_part)
    elif not user_entries_texts: 
         messages_to_send.append(header + "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    for i, part_msg in enumerate(messages_to_send):
        try:
            await update.message.reply_text(part_msg, parse_mode=constants.ParseMode.MARKDOWN)
            if i < len(messages_to_send) - 1: await asyncio.sleep(0.3) 
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (Markdown): {e}")
            await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —á–∞—Å—Ç–∏ —Å–ø–∏—Å–∫–∞: {e}")
            break 
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {update.effective_user.full_name} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


async def show_user_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /show_user_info.

    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ,
    –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–æ ID, –∏–º–µ–Ω–∏ –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º—É.
    """
    requesting_user_id_str = str(update.effective_user.id)
    admin_user_id = context.bot_data.get("admin_user_id")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not admin_user_id or requesting_user_id_str != admin_user_id:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.")
        return
        
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/show_user_info <ID | –∏–º—è | –Ω–∏–∫>`", parse_mode=constants.ParseMode.MARKDOWN)
        return
    
    query = " ".join(context.args).strip().lower()
    users_data: dict = context.bot_data.get("users_data_dict", {})
    found_user_id = None
    found_user_info = None

    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    for u_id, info in users_data.items():
        name_lower = info.get('name', '').lower()
        nicknames = info.get('nicknames', [])
        if isinstance(nicknames, str): nicknames = [nicknames]
        nicknames_lower = [nick.lower() for nick in nicknames]

        if query == u_id.lower() or query == name_lower or query in nicknames_lower:
            found_user_id = u_id
            found_user_info = info
            break
            
    if not found_user_info:
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –∑–∞–ø—Ä–æ—Å—É '{escape_markdown(query)}' –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode=constants.ParseMode.MARKDOWN)
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    name = escape_markdown(found_user_info.get('name', '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'))
    nicknames_list = found_user_info.get('nicknames', [])
    if isinstance(nicknames_list, str): nicknames_list = [nicknames_list]
    escaped_nicknames = [escape_markdown(n) for n in nicknames_list]
    known_info = escape_markdown(found_user_info.get('known_info', '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'))
    
    nick_str_display = f"–ü—Ä–æ–∑–≤–∏—â–∞: {', '.join(escaped_nicknames)}" if escaped_nicknames else ""

    response_text = f"‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:*\n"
    response_text += f"   –ò–º—è: *{name}*\n"
    response_text += f"   ID: `{found_user_id}`\n"
    if nick_str_display: 
        response_text += f"   {nick_str_display}\n"
    response_text += f"   –ò–∑–≤–µ—Å—Ç–Ω–æ: _{known_info}_" 
    
    await update.message.reply_text(response_text, parse_mode=constants.ParseMode.MARKDOWN)
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {update.effective_user.full_name} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {query} (–ù–∞–π–¥–µ–Ω: {name if found_user_info else '–ù–µ—Ç'}).")